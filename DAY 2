day2

2d array rotation 90 degree
#include <stdio.h>


#include <stdio.h>

int main()
{
    int i,j,row,col,a[10][10];
    printf("enter the no.of rows:");
    scanf("%d",&row);
    printf("enter the no.of columns:");
    scanf("%d",&col);
    for(i=0;i<row;i++){
        for(j=0;j<col;j++){
            printf("enter the element at (%d,%d):",i,j);
            scanf("%d",&a[i][j]);
        }
    }
    for(i=0;i<row;i++){
        for(j=0;j<col;j++){
            printf("%d  ",a[i][j]);
        }
        printf("\n");
    }
    for(j=0;j<col;j++){
        for(i=0;i<row;i++){
            printf("%d  ",a[i][j]);
        }
        printf("\n");
    }
    
    for(j=0;j<col;j++){
        for(i=row-1;i>=0;i--){
            printf("%d  ",a[i][j]);
        }
        printf("\n");
    }
    return 0;
}

Another code
For(i=0;i<n;i++)
{
For(j=0;j<I;j++j)
{
statement;
}
}
I     j
   So when I  0---------0times
1-------1 times
2------2 times
So 1+2+3------n=n(n+1)/2
=(n square+n)/2
O(n square)
   







n=3
p=0
for(i=1;p<=n;i++)
{
p=p+i;
}


Not n times assuming
When will stop when p>n
P=k(k+1)/2   bcs 1+2+------k
P=k square >n
So n=sqrt of n
Time complexity O(sqrt(n))







For(i=1;i<n;i*2)
{
Statement;
}

Analysis
I=1     1 time
I=2     2 times  (1*2)
I=3      4 times     (1*2)*2=2   power 2
1=4         8 times   (1*2)*2)*2=2 power3


Create an 1d array it should contain numbers b/w 10 to 30 in this extract and print
(i)even numbers
(ii)2  power values


#include <stdio.h>
#include<math.h>
int main()
{
    int a[100],i,n;
    printf("enter the size of array:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("enter the values at between 10 to 30 %d  :",i);
        scanf("%d",&a[i]);
    }
    for(i=0;i<n;i++){
        printf("%d   ",a[i]);
    }
    printf("\n");
    printf("even numbers:");
    for(i=0;i<n;i++){
     if(a[i]%2==0)
    {
        printf("%d  ",a[i]);
    }
    }
    printf("\n");
    printf("2 powers");
    for(i=0;i<n;i++){
        for(int j=0;j<n;j++){
    if(pow(2,j)==a[i]){
        printf("%d   ",a[i]);
    }
    }}
    return 0;
}


Time complexity log10 base 2 for the i*2


For(i=n;i>=1;i/2)
{
Statements;
}
1
N
n/2
n/2 power 2
..
n/2 power k
assume i<1 it stops right?
n/2 power k<1
n/2 power k=1
n=2 power k
k=log n base 2 so O(log n)


DERIVATION FORMULAE
For(i=0;i<n;i++)………..O(n)
For(i=0;i<n;i+2)………..O(n)
For(i=n;i>1;i--)………..O(n)


For(i=1;i<n;i*2)………..O(log n base 2)
For(i=1;i<n;i*3)………..O(log n base 3)
For(i=n;i>1;i=i/2)………..O(log n base 2)





NAME OF THE COMPLEXITY
•	Constant time complexity: O(1)…..
•	Linear time complexity: O(n)
•	Logarithmic time complexity: O(log n)….
•	Quadratic time complexity: O(n²)….
•	Exponential time complexity: O(2^n)

FINAL SUMMARY:
I++  i--    i+2     O(n)
I*2   i/2         log(n)    base 2
P=0
For p<n i++
P=p+i
O(sqrt(n))
  
SPACE COMPLEXITY
Parallel concepts to time complexity.
Array of size n, require O(n) space
2D array of array size n*n: O(n2) space.

Linear search         O(1)
Merge sort              O(n)
DFS                          O(n)
BFS                            O(n)
Dynamic programming      O(n²)or O(n*m)
-------------------------------
BIG-O   notation:
Omega notation:
Theta notation:
-------------------------------
Big-O notation:



•	Sum of array elements
#include <stdio.h>

int main()
{
    int n,sum=0,a[100],i;
    printf("enter the array size:");
    scanf("%d",&n);
    for(i=0;i<n;i++){
        printf("enter the array elements at %d  :",i);
        scanf("%d",&a[i]);
        
    }
    printf("\n");
    for(i=0;i<n;i++){
        sum=sum+a[i];
    }
    printf("%d",sum);

    return 0;
}
•	Linear search
#include<stdio.h>
void main(){
    int a[100],i,n,search;
    printf("enter the size of array:");
    scanf("%d",&n);
    for(i=0;i<n;i++){
        printf("enter the array elements at %d:",i);
        scanf("%d",&a[i]);
    }
    printf("Enter the element to be searched:");
    scanf("%d",&search);
    for(i=0;i<n;i++){
        if(a[i]==search)
        {
            printf("entered element is found at position %d",i+1);
            return;
        }
        
    }
    printf("not found");
    
    
}


SPACE COMPLEXITY:

Space complexity is parallel to time complexity
For 1d array order(n)
2d array O(n²)
Same amount of space regardless of input size of n
Eg:
1	sum of array elements
2	Linear search
Why it is o(1)
Space is not depending on values

Quick sort 
Big-o(n)
Log-linear complexity :O(nlogn)
When the space complexity of an algorithm grows proportionally to the input size 
And a logarithmic factor

•	
   def generate_lists_of_lists(n):
    table_list=[]
    for num in range(n):
        row=[]
        for i in range(n):
            row.append(i)
            table_list.append(row)
        return table_list
print(generate_lists_of_lists(10))

order:
O(n²)
Big-O(n)
#include <stdio.h>
struct a{
    
    int z;
    char y;
    double x;
    
    
    
};
int main()
{
    struct a yes;
    printf("%d",sizeof(yes));

    return 0;
}
o/p:16


#include <stdio.h>
struct a{
    
    
    char y;
    double x;
    int z;
    
    
    
    
};
int main()
{
    struct a yes;
    printf("%d",sizeof(yes));

    return 0;
}
o/p:24



•	Factorial 
#include <stdio.h>
int factorial(int num){
    if(num==0){
        return 1;
    }
    else
    {
        return num*factorial(num-1);
    }
}
int main()
{
    int num,v;
    printf("enter any number:");
    scanf("%d",&num);
    v=factorial(num);
    printf("%d",v);
    return 0;
}

